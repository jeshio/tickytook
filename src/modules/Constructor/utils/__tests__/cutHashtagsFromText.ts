import cutHashtagsFromText from '../cutHashtagsFromText';

describe('cutHashtagsFromText', () => {
  it('–ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç', () => {
    expect(cutHashtagsFromText('')).toEqual('');
  });

  it('—Ç–µ–∫—Å—Ç —Å —Ö—ç—à—Ç–µ–≥–∞–º–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏', () => {
    const text = `–Ø —Å–∏–¥–µ–ª –∏ —Å–º–æ—Ç—Ä–µ–ª, –∞ —Ç–∞–º –ø—É—Å—Ç–æ #—Å–∏–¥–µ–ª #—Å–º–æ—Ç—Ä–µ–ª #–ø—É—Å—Ç–æ—Ç–∞`;
    expect(cutHashtagsFromText(text)).toEqual('–Ø —Å–∏–¥–µ–ª –∏ —Å–º–æ—Ç—Ä–µ–ª, –∞ —Ç–∞–º –ø—É—Å—Ç–æ');
  });

  it('—Ç–µ–∫—Å—Ç —Å —Ö—ç—à—Ç–µ–≥–∞–º–∏ –∫–∞–∫ –ø–æ–ø–∞–ª–æ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏', () => {
    const text = `–Ø —Å–∏–¥–µ–ª –∏ —Å–º–æ—Ç—Ä–µ–ª, –∞ —Ç–∞–º –ø—É—Å—Ç–æ #—Å–∏–¥–µ–ª#—Å–º–æ—Ç—Ä–µ–ª #–ø—É—Å—Ç–æ—Ç–∞`;
    expect(cutHashtagsFromText(text)).toEqual('–Ø —Å–∏–¥–µ–ª –∏ —Å–º–æ—Ç—Ä–µ–ª, –∞ —Ç–∞–º –ø—É—Å—Ç–æ');
  });

  it('—Ç–µ–∫—Å—Ç —Å —Ç–æ—á–∫–æ–π + —Ö—ç—à—Ç–µ–≥–∏ –∫–∞–∫ –ø–æ–ø–∞–ª–æ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏', () => {
    const text = `–Ø —Å–∏–¥–µ–ª –∏ —Å–º–æ—Ç—Ä–µ–ª, –∞ —Ç–∞–º –ø—É—Å—Ç–æ. #—Å–∏–¥–µ–ª#—Å–º–æ—Ç—Ä–µ–ª #–ø—É—Å—Ç–æ—Ç–∞`;
    expect(cutHashtagsFromText(text)).toEqual('–Ø —Å–∏–¥–µ–ª –∏ —Å–º–æ—Ç—Ä–µ–ª, –∞ —Ç–∞–º –ø—É—Å—Ç–æ.');
  });

  it('—Ç–µ–∫—Å—Ç + —Ö—ç—à—Ç–µ–≥ + —Ç–æ—á–∫–∞', () => {
    const text = `–Ω–µ —Å–∏–ª—å–Ω–æ #—Å–ª–æ–∂–Ω–æ.`;
    expect(cutHashtagsFromText(text)).toEqual('–Ω–µ —Å–∏–ª—å–Ω–æ —Å–ª–æ–∂–Ω–æ.');
  });

  // it('—Ç–µ–∫—Å—Ç + —Ö—ç—à—Ç–µ–≥ + emoji', () => {
  //   const text = `–Ω–µ —Å–∏–ª—å–Ω–æ #—Å–ª–æ–∂–Ω–æüëâ`;
  //   expect(cutHashtagsFromText(text)).toEqual('–Ω–µ —Å–∏–ª—å–Ω–æ —Å–ª–æ–∂–Ω–æüëâ');
  // });

  it('—Ç–µ–∫—Å—Ç —Å —Ö—ç—à—Ç–µ–≥–∞–º–∏ –∫–∞–∫ –ø–æ–ø–∞–ª–æ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏', () => {
    const text = `#—Å–∏–¥–µ–ª#—Å–º–æ—Ç—Ä–µ–ª #–ø—É—Å—Ç–æ—Ç–∞ –Ø —Å–∏–¥–µ–ª –∏ —Å–º–æ—Ç—Ä–µ–ª, –∞ —Ç–∞–º –ø—É—Å—Ç–æ`;
    expect(cutHashtagsFromText(text)).toEqual('–Ø —Å–∏–¥–µ–ª –∏ —Å–º–æ—Ç—Ä–µ–ª, –∞ —Ç–∞–º –ø—É—Å—Ç–æ');
  });

  it('—Ç–µ–∫—Å—Ç —Å —Ö—ç—à—Ç–µ–≥–∞–º–∏ –∫–∞–∫ –ø–æ–ø–∞–ª–æ –≤ –∫–æ–Ω—Ü–µ –∏ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏', () => {
    const text = `#—Å–∏–¥–µ–ª#—Å–º–æ—Ç—Ä–µ–ª #–ø—É—Å—Ç–æ—Ç–∞ –Ø —Å–∏–¥–µ–ª –∏ —Å–º–æ—Ç—Ä–µ–ª, –∞ —Ç–∞–º –ø—É—Å—Ç–æ #–∞ #–≤–æ—Ç#—Ç–∞–∫`;
    expect(cutHashtagsFromText(text)).toEqual('–Ø —Å–∏–¥–µ–ª –∏ —Å–º–æ—Ç—Ä–µ–ª, –∞ —Ç–∞–º –ø—É—Å—Ç–æ');
  });

  it('—Ç–µ–∫—Å—Ç —Å —Ö—ç—à—Ç–µ–≥–∞–º–∏ —Å–º–µ—à–∞–Ω–Ω—ã–º–∏ —Å–æ —Å—Ç—Ä–æ–∫–æ–π', () => {
    const text = `#–Ø —Å–∏–¥–µ–ª –∏ #—Å–º–æ—Ç—Ä–µ–ª, –∞#—Ç–∞–º –ø—É—Å—Ç–æ`;
    expect(cutHashtagsFromText(text)).toEqual('–Ø —Å–∏–¥–µ–ª –∏ —Å–º–æ—Ç—Ä–µ–ª, –∞ —Ç–∞–º –ø—É—Å—Ç–æ');
  });

  it('—Ç–µ–∫—Å—Ç —Å —Ö—ç—à—Ç–µ–≥–∞–º–∏ —Å–º–µ—à–∞–Ω–Ω—ã–º–∏ —Å–æ —Å—Ç—Ä–æ–∫–æ–π #2', () => {
    const text = `test #dd df`;
    expect(cutHashtagsFromText(text)).toEqual('test dd df');
  });

  it('—Ç–µ–∫—Å—Ç —Å —Ö—ç—à—Ç–µ–≥–∞–º–∏ —Å–º–µ—à–∞–Ω–Ω—ã–º–∏ —Å–æ —Å—Ç—Ä–æ–∫–æ–π #3', () => {
    const text = `t #dd f`;
    expect(cutHashtagsFromText(text)).toEqual('t dd f');
  });

  it('—Ç–µ–∫—Å—Ç —Å —Ö—ç—à—Ç–µ–≥–∞–º–∏ —Å–º–µ—à–∞–Ω–Ω—ã–º–∏ —Å–æ —Å—Ç—Ä–æ–∫–æ–π + —Ö—ç—à—Ç–µ–≥–∏ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏', () => {
    const text = `#–Ø —Å–∏–¥–µ–ª –∏ #—Å–º–æ—Ç—Ä–µ–ª, –∞#—Ç–∞–º –ø—É—Å—Ç–æ#—Ç–µ—Å—Ç #–µ—â—ë #–æ–¥–∏–Ω`;
    expect(cutHashtagsFromText(text)).toEqual('–Ø —Å–∏–¥–µ–ª –∏ —Å–º–æ—Ç—Ä–µ–ª, –∞ —Ç–∞–º –ø—É—Å—Ç–æ');
  });

  it('—Ç–µ–∫—Å—Ç —Å —Ö—ç—à—Ç–µ–≥–∞–º–∏ —Å–º–µ—à–∞–Ω–Ω—ã–º–∏ —Å–æ —Å—Ç—Ä–æ–∫–æ–π + —Ö—ç—à—Ç–µ–≥–∏ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏ –∏ —Ç–æ—á–∫–∞', () => {
    const text = `#–Ø —Å–∏–¥–µ–ª –∏ #—Å–º–æ—Ç—Ä–µ–ª, –∞#—Ç–∞–º –ø—É—Å—Ç–æ#—Ç–µ—Å—Ç #–µ—â—ë #–æ–¥–∏–Ω.`;
    expect(cutHashtagsFromText(text)).toEqual('–Ø —Å–∏–¥–µ–ª –∏ —Å–º–æ—Ç—Ä–µ–ª, –∞ —Ç–∞–º –ø—É—Å—Ç–æ —Ç–µ—Å—Ç –µ—â—ë –æ–¥–∏–Ω.');
  });

  it('—Ç–µ–∫—Å—Ç —Å —Ö—ç—à—Ç–µ–≥–∞–º–∏ —Å–º–µ—à–∞–Ω–Ω—ã–º–∏ —Å–æ —Å—Ç—Ä–æ–∫–æ–π + —Ö—ç—à—Ç–µ–≥–∏ —Å –¥–µ—Ñ–∏—Å–∞–º–∏ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏', () => {
    const text = `#–Ø —Å–∏–¥–µ–ª –∏ #—Å–º–æ—Ç—Ä–µ–ª, –∞#—Ç–∞–º –ø—É—Å—Ç–æ#—Ç–µ—Å—Ç #–µ—â—ë-–æ–¥–∏–Ω`;
    expect(cutHashtagsFromText(text)).toEqual('–Ø —Å–∏–¥–µ–ª –∏ —Å–º–æ—Ç—Ä–µ–ª, –∞ —Ç–∞–º –ø—É—Å—Ç–æ —Ç–µ—Å—Ç –µ—â—ë-–æ–¥–∏–Ω');
  });

  it('—Ç–µ–∫—Å—Ç + —Ö—ç—à—Ç–µ–≥–∏ —Å –¥–µ—Ñ–∏—Å–∞–º–∏ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏', () => {
    const text = `–Ø —Å–∏–¥–µ–ª –∏ —Å–º–æ—Ç—Ä–µ–ª, –∞ —Ç–∞–º –ø—É—Å—Ç–æ#—Ç–µ—Å—Ç #–µ—â—ë-–æ–¥–∏–Ω`;
    expect(cutHashtagsFromText(text)).toEqual('–Ø —Å–∏–¥–µ–ª –∏ —Å–º–æ—Ç—Ä–µ–ª, –∞ —Ç–∞–º –ø—É—Å—Ç–æ —Ç–µ—Å—Ç –µ—â—ë-–æ–¥–∏–Ω');
  });

  it('—Ç–µ–∫—Å—Ç —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫, —Ö—ç—à—Ç–µ–≥–∞–º–∏ —Å–º–µ—à–∞–Ω–Ω—ã–º–∏ —Å–æ —Å—Ç—Ä–æ–∫–æ–π + —Ö—ç—à—Ç–µ–≥–∏ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏', () => {
    const text = `#–Ø —Å–∏–¥–µ–ª
    –∏#—Å–º–æ—Ç—Ä–µ–ª, –∞#—Ç–∞–º –ø—É—Å—Ç–æ#—Ç–µ—Å—Ç
    #–µ—â—ë #–æ–¥–∏–Ω`;
    const resultText = `–Ø —Å–∏–¥–µ–ª
    –∏ —Å–º–æ—Ç—Ä–µ–ª, –∞ —Ç–∞–º –ø—É—Å—Ç–æ`;
    expect(cutHashtagsFromText(text)).toEqual(resultText);
  });
});
